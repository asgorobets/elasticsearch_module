<?php

/**
 * @file
 * Implementation of the field storage API for Elasticsearch.
 */

/**
 * Implement hook_field_storage_info().
 */
function elasticsearch_field_storage_field_storage_info() {
  return array(
    'elasticsearch_field_storage' => array(
      'label' => t('Elasticsearch field storage'),
      'description' => t('Stores nodes and fields in a elasticsearch index.'),
    ),
  );
}

function elasticsearch_field_storage_index($age) {
  if (!class_exists('Elastica_Client')) {
    elasticsearch_init();
  }
  $client = new Elastica_Client();
  return $client->getIndex(variable_get('elasticsearch_field_storage_prefix') . ($age == FIELD_LOAD_CURRENT ? '_field_current' : '_field_revision'));
}

function elasticsearch_field_storage_create_indexes() {
  $indexes = array(
    elasticsearch_field_storage_index(FIELD_LOAD_CURRENT),
    elasticsearch_field_storage_index(FIELD_LOAD_REVISION),
  );

  foreach ($indexes as $index) {
    try {
      $index->getStatus();
    }
    catch (Elastica_Exception_Response $e) {
      // Try to create the index.
      $index->create();
    }

    // Set the mapping for each entity type.
    $instances = field_info_instances();
    foreach ($instances as $entity_type => $bundles) {
      $type = $index->getType($entity_type);

    	$mapping = array(
    	  // Base information.
    		'_id' => array('type' => 'long', 'store' => 'yes'),
      	'_revision_id' => array('type' => 'long', 'store' => 'yes'),

        // Basic entity parameters.
    		'_entity_type' => array('type' => 'string', 'store' => 'yes'),
    		'_entity_bundle' => array('type' => 'string', 'store' => 'yes'),
      );

      // Add fields.
      foreach ($bundles as $bundle_name => $field_instances) {
        foreach ($field_instances as $field_name => $field_instance) {
          $mapping[$field_name] = array('type' => 'nested');
        }
      }
    	$type->setMapping($mapping);
    }
  }
}

/**
 * Implement hook_field_storage_details().
 */
function elasticsearch_field_storage_field_storage_details($field) {
  // We probably want to implement that at one point, but this is informative only.
}

/**
 * Implement hook_field_storage_create_field().
 */
function elasticsearch_field_storage_field_storage_create_field($field) {
  // Update the mapping.
  elasticsearch_field_storage_create_indexes();
}

/**
 * Implement hook_field_storage_update_field().
 */
function elasticsearch_field_storage_field_storage_update_field($field, $prior_field, $has_data) {
  // Update the mapping.
  elasticsearch_field_storage_create_indexes();
}

/**
 * Implement hook_field_storage_delete_field().
 */
function elasticsearch_field_storage_field_storage_delete_field($field) {
  // Update the mapping.
  elasticsearch_field_storage_create_indexes();
}

/**
 * Implement hook_field_storage_load().
 */
function elasticsearch_field_storage_field_storage_load($entity_type, $entities, $age, $fields, $options) {
  $load_current = $age == FIELD_LOAD_CURRENT;

  // Fetch information about the fields and prepare the keys.
  $keys = array();
  $field_names = array();
  $saved_fields = array();
  foreach ($fields as $field_id => $ids) {
    $field = field_info_field_by_id($field_id);
    $saved_fields[$field_id] = $field;

    // Add this fields' id to the list.
    foreach ($ids as $id) {
      $keys[$id] = TRUE;
    }
  }

  // Execute the query and save the fields to the parent object.
  $type = elasticsearch_field_storage_index($age)->getType($entity_type);
  $query = new Elastica_Query_Ids();
  $query->setType($entity_type);
	$query->setIds(array_keys($keys));
	$result = $type->search($query);

  foreach ($result as $document) {
    $row = $document->getSource();
    $entity_id = $row['_entity_id'];
    foreach ($saved_fields as $field_id => $field) {
      $field_name = $field['field_name'];
      $field_values = array();
      if (!empty($row[$field_name])) {
        // Restore the field structure.
        if ($field['cardinality'] == 1) {
          $language = isset($row[$field_name]['_language']) ? $row[$field_name]['_language'] : LANGUAGE_NONE;
          unset($row[$field_name]['_language']);
          $field_values[$language][0] = $row[$field_name];
        }
        else {
          foreach ($row[$field_name] as $delta => $column_values) {
            $language = isset($column_values['_language']) ? $column_values['_language'] : LANGUAGE_NONE;
            unset($column_values['_language']);
            $field_values[$language][$delta] = $column_values;
          }
        }
      }
      $entities[$entity_id]->{$field_name} = $field_values;
    }
  }
}

/**
 * Implement hook_field_storage_write().
 */
function elasticsearch_field_storage_field_storage_write($entity_type, $entity, $op, $fields, $entity_write = FALSE) {
  $wrote = &drupal_static(__FUNCTION__, array());
  list($entity_id, $revision_id, $bundle) = entity_extract_ids($entity_type, $entity);
  // There is always a field_attach_insert/update call followed by an
  // entity_insert/update. field_attach does not call storage_write needlessly
  // so we need to make sure if the entity was not saved during field_attach,
  // it will be during entity write. The static is set during attach write if
  // one happened and always unset on entity write.
  if ($entity_write) {
    if (isset($wrote[$entity_type][$entity_id])) {
      unset($wrote[$entity_type][$entity_id]);
      return;
    }
  }
  else {
    $wrote[$entity_type][$entity_id] = TRUE;
  }

  // Prepare the document.
  $new_entity = new stdClass();
  $new_entity->_entity_id = intval($entity_id);
  $new_entity->_entity_type = $entity_type;
  $new_entity->_entity_bundle = $bundle;
  if (isset($revision_id)) {
    $new_entity->_revision_id = intval($revision_id);
  }

  // Add the base table's fields to the new object.
  $entity_info = entity_get_info($entity_type);
  // Although it's rare not to define a base table, test entities for sure
  // don't.
  if (isset($entity_info['base table'])) {
    $table_schema = drupal_get_schema($entity_info['base table']);
    foreach ($table_schema['fields'] as $field_name => $column_definition) {
      if (isset($entity->$field_name)) {
        $new_entity->$field_name = _elasticsearch_field_storage_value($column_definition['type'], $entity->$field_name);
      }
    }
  }

  // Add the fieldapi fields to the new object
  foreach ($fields as $field_id) {
    $field = field_info_field_by_id($field_id);
    $field_name = $field['field_name'];
    $field_values = array();
    if (isset($entity->$field_name)) {
      foreach ($entity->$field_name as $language => $values) {
        // According to field.test, we should not save anything for NULL.
        if (isset($values[0])) {
          if ($field['cardinality'] == 1) {
            foreach ($values[0] as $column_name => $column_value) {
              if (isset($field['columns'][$column_name])) {
                $field_values[$column_name] = _elasticsearch_field_storage_value($field['columns'][$column_name]['type'], $column_value);
              }
              if ($language != LANGUAGE_NONE) {
                $field_values['_language'] = $language;
              }
            }
          }
          else {
            // Collapse deltas.
            $values = array_values($values);
            if ($field['cardinality'] > 1 && count($values) > $field['cardinality']) {
              // Silently remove additional values, that's what the core storage does.
              $values = array_slice($values, 0, $field['cardinality']);
            }
            foreach ($values as $delta => $column_values) {
              $store_values = array();
              foreach ($column_values as $column_name => $column_value) {
                if (isset($field['columns'][$column_name])) {
                  $store_values[$column_name] = _elasticsearch_field_storage_value($field['columns'][$column_name]['type'], $column_values[$column_name]);
                }
              }
              // Collapse the field structure.
              if ($language != LANGUAGE_NONE) {
                $store_values['_language'] = $language;
              }
              $field_values[] = $store_values;
            }
          }
        }
      }
    }
    $new_entity->$field_name = empty($field_values) ? NULL : $field_values;
  }

  // Save the object.
  $index = elasticsearch_field_storage_index(FIELD_LOAD_CURRENT);
  $type = $index->getType($entity_type);
  $document = new Elastica_Document($new_entity->_entity_id, (array) $new_entity);
  $type->addDocument($document);
  $index->refresh();

  if (isset($revision_id)) {
    $index = elasticsearch_field_storage_index(FIELD_LOAD_REVISION);
    $type = $index->getType($entity_type);
    $document = new Elastica_Document($new_entity->_revision_id, (array) $new_entity);
    $type->addDocument($document);
    $index->refresh();
  }
}

function _elasticsearch_field_storage_value($type, $value) {
  switch ($type) {
    case 'int':
    case 'serial':
      return (int) $value;
    case 'float':
      return (float) $value;
    default:
      return $value;
  }
}

/**
 * Implement hook_field_storage_delete().
 *
 * This function deletes data for all fields for an entity from the database.
 */
function elasticsearch_field_storage_field_storage_delete($entity_type, $entity, $fields) {
  list($entity_id, , ) = entity_extract_ids($entity_type, $entity);

  $index = elasticsearch_field_storage_index(FIELD_LOAD_CURRENT);
  $index->getType($entity_type)->deleteById($entity_id);
  $index->refresh();

  // TODO: we need to make this scale. This is a dummy implementation for
  // test purposes.
	$query = new Elastica_Query_Terms();
	$query->setTerms('_entity_id', array($entity_id));

  $index = elasticsearch_field_storage_index(FIELD_LOAD_REVISION);
  $type = $index->getType($entity_type);
  $result = $type->search($query);
  foreach ($result as $document) {
    $type->deleteById($document->getId());
  }
  $index->refresh();
}

/**
 * Implement hook_field_storage_delete_revision().
 *
 * This function actually deletes the data from the database.
 */
function elasticsearch_field_storage_field_storage_delete_revision($entity_type, $entity, $fields) {
  list(, $revision_id, ) = entity_extract_ids($entity_type, $entity);
  $index = elasticsearch_field_storage_index(FIELD_LOAD_REVISION);
  $index->getType($entity_type)->deleteById($revision_id);
  $index->refresh();
}

/**
 * Implement hook_field_storage_delete_instance().
 *
 * This function simply marks for deletion all data associated with the field.
 */
function elasticsearch_field_storage_field_storage_delete_instance($instance) {
  // TODO: figure out what to do.
}

/**
 * Implements hook_entity_query_alter().
 */
function elasticsearch_field_storage_entity_query_alter($query) {
  // $query->executeCallback = 'elasticsearch_field_storage_query';
}

function elasticsearch_field_storage_query($query) {
  // @todo: implement.
  return array();
}

/**
 * Implement hook_field_attach_rename_bundle().
 */
function elasticsearch_field_storage_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new) {
  // TODO: we need to make this scale. This is a dummy implementation for
  // test purposes.

	$query = new Elastica_Query_Terms();
	$query->setTerms('_entity_bundle', array($bundle_old));

  $indexes = array(
    elasticsearch_field_storage_index(FIELD_LOAD_CURRENT),
    elasticsearch_field_storage_index(FIELD_LOAD_REVISION),
  );

  foreach ($indexes as $index) {
    $type = $index->getType($entity_type);
    $result = $type->search($query);
    foreach ($result as $document) {
      $source = $document->getSource();
      $source['_entity_bundle'] = $bundle_new;
      $document = new Elastica_Document($document->getId(), $source);
      $type->addDocument($document);
    }
    $index->refresh();
  }
}

/**
 * Implements hook_entity_insert().
 */
function elasticsearch_field_storage_entity_insert($entity, $entity_type) {
  elasticsearch_field_storage_field_storage_write($entity_type, $entity, NULL, array(), TRUE);
}

/**
 * Implements hook_entity_update().
 */
function elasticsearch_field_storage_entity_update($entity, $entity_type) {
  elasticsearch_field_storage_field_storage_write($entity_type, $entity, NULL, array(), TRUE);
}

/**
 * Implements hook_field_attach_delete.
 */
function _DISABLED_elasticsearch_field_storage_field_attach_delete($entity_type, $entity) {
  // Disabled: this needs to be rewritten as a hook_entity_delete(),
  // and as a consequence this module needs to depend on Entity API.
}
