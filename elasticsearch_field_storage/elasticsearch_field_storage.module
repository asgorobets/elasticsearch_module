<?php

/**
 * @file
 * Implementation of the field storage API for Elasticsearch.
 */

/**
 * Implement hook_field_storage_info().
 */
function elasticsearch_field_storage_field_storage_info() {
  return array(
    'elasticsearch_field_storage' => array(
      'label' => t('Elasticsearch field storage'),
      'description' => t('Stores nodes and fields in a elasticsearch index.'),
    ),
  );
}

/**
 * Retrieve elasticsearch index by field age.
 *
 * @param $age
 * @return \Elastica\Index
 */
function elasticsearch_field_storage_index($age) {
  if (!class_exists('Client')) {
    elasticsearch_init();
  }
  $client = new Elastica\Client();
  return $client->getIndex(variable_get('elasticsearch_field_storage_prefix') . ($age == FIELD_LOAD_CURRENT ? 'field_current' : 'field_revision'));
}

function elasticsearch_field_storage_create_indexes() {
  $indexes = array(
    elasticsearch_field_storage_index(FIELD_LOAD_CURRENT),
    elasticsearch_field_storage_index(FIELD_LOAD_REVISION),
  );

  foreach ($indexes as $index) {
    try {
      $index->getStatus();
    }
    catch (Elastica\Exception\ResponseException $e) {
      // Define default index settings.
      $data = array();
      // Allow modules to define their own index settings.
      drupal_alter('elasticsearch_field_storage_index_settings',$data, $index);
      $index->create($data);
    }

    // Set the mapping for each entity type.
    $instances = field_info_instances();
    foreach ($instances as $entity_type => $bundles) {
      $type = $index->getType($entity_type);

      $mapping = array(
        // Base information.
        'id' => array('type' => 'long', 'store' => 'yes'),
        'revision_id' => array('type' => 'long', 'store' => 'yes'),
        // Basic entity parameters.
        'entity_type' => array('type' => 'string', 'store' => 'yes'),
        'bundle' => array('type' => 'string', 'store' => 'yes'),
      );

      // Add fields.
      foreach ($bundles as $bundle_name => $field_instances) {
        foreach ($field_instances as $field_name => $field_instance) {
          $field = field_info_field($field_name);
          // Create mappings only for elasticsearch field storage fields.
          if ($field['storage']['type'] == 'elasticsearch_field_storage') {
            $mapping[$field_name] = array('type' => 'nested');
            $mapping[$field_name]['properties'] = array();
            foreach ($field['columns'] as $column_name => $column) {
              $properties = _elasticsearch_field_storage_field_properties($column_name, $column['type']);
              $mapping[$field_name]['properties'] += $properties;
            }
          }
        }
      }
      $type->setMapping($mapping);
    }
  }
}

/**
 * Implement hook_field_storage_details().
 */
function elasticsearch_field_storage_field_storage_details($field) {
  // We probably want to implement that at one point, but this is informative only.
}

/**
 * Implement hook_field_storage_create_field().
 */
function elasticsearch_field_storage_field_storage_create_field($field) {
  // Update the mapping.
  elasticsearch_field_storage_create_indexes();
}

/**
 * Implement hook_field_storage_update_field().
 */
function elasticsearch_field_storage_field_storage_update_field($field, $prior_field, $has_data) {
  // Update the mapping.
  elasticsearch_field_storage_create_indexes();
}

/**
 * Implement hook_field_storage_delete_field().
 */
function elasticsearch_field_storage_field_storage_delete_field($field) {
  // Update the mapping.
  elasticsearch_field_storage_create_indexes();
}

/**
 * Implement hook_field_storage_load().
 */
function elasticsearch_field_storage_field_storage_load($entity_type, $entities, $age, $fields, $options) {
  $load_current = $age == FIELD_LOAD_CURRENT;

  // Fetch information about the fields and prepare the keys.
  $keys = array();
  $field_names = array();
  $saved_fields = array();
  foreach ($fields as $field_id => $ids) {
    $field = field_info_field_by_id($field_id);
    $saved_fields[$field_id] = $field;

    // Add this fields' id to the list.
    foreach ($ids as $id) {
      $keys[$id] = TRUE;
    }
  }

  // Execute the query and save the fields to the parent object.
  $type = elasticsearch_field_storage_index($age)->getType($entity_type);
  $query = new Elastica\Query\Ids();
  $query->setType($entity_type);
	$query->setIds(array_keys($keys));
    // Size should be set or default size will be applied.
    $size = count($keys);
	$result = $type->search($query, $size);

  foreach ($result as $document) {
    $row = $document->getSource();
    $entity_id = $row['entity_id'];
    foreach ($saved_fields as $field_id => $field) {
      $field_name = $field['field_name'];
      $field_values = array();
      if (!empty($row[$field_name])) {
        // Restore the field structure.
        if ($field['cardinality'] == 1) {
          $language = isset($row[$field_name]['language']) ? $row[$field_name]['language'] : LANGUAGE_NONE;
          unset($row[$field_name]['language']);
          $field_values[$language][0] = $row[$field_name];
        }
        else {
          foreach ($row[$field_name] as $delta => $column_values) {
            $language = isset($column_values['language']) ? $column_values['language'] : LANGUAGE_NONE;
            unset($column_values['language']);
            $field_values[$language][$delta] = $column_values;
          }
        }
      }
      $entities[$entity_id]->{$field_name} = $field_values;
    }
  }
}

/**
 * Implement hook_field_storage_write().
 */
function elasticsearch_field_storage_field_storage_write($entity_type, $entity, $op, $fields, $entity_write = FALSE) {
  $wrote = &drupal_static(__FUNCTION__, array());
  list($entity_id, $revision_id, $bundle) = entity_extract_ids($entity_type, $entity);
  // There is always a field_attach_insert/update call followed by an
  // entity_insert/update. field_attach does not call storage_write needlessly
  // so we need to make sure if the entity was not saved during field_attach,
  // it will be during entity write. The static is set during attach write if
  // one happened and always unset on entity write.
  if ($entity_write) {
    if (isset($wrote[$entity_type][$entity_id])) {
      unset($wrote[$entity_type][$entity_id]);
      return;
    }
  }
  else {
    $wrote[$entity_type][$entity_id] = TRUE;
  }

  // Prepare the document.
  $new_entity = new stdClass();
  $new_entity->entity_id = intval($entity_id);
  $new_entity->entity_type = $entity_type;
  $new_entity->bundle = $bundle;
  if (isset($revision_id)) {
    $new_entity->revision_id = intval($revision_id);
  }

  // Add the base table's fields to the new object.
  $entity_info = entity_get_info($entity_type);
  // Although it's rare not to define a base table, test entities for sure
  // don't.
  if (isset($entity_info['base table'])) {
    $table_schema = drupal_get_schema($entity_info['base table']);
    foreach ($table_schema['fields'] as $field_name => $column_definition) {
      if (isset($entity->$field_name)) {
        $new_entity->$field_name = _elasticsearch_field_storage_value($column_definition['type'], $entity->$field_name);
      }
    }
  }

  // Add the fieldapi fields to the new object
  foreach ($fields as $field_id) {
    $field = field_info_field_by_id($field_id);
    $field_name = $field['field_name'];
    $field_values = array();
    if (isset($entity->$field_name)) {
      foreach ($entity->$field_name as $language => $values) {
        // According to field.test, we should not save anything for NULL.
        if (isset($values[0])) {
          if ($field['cardinality'] == 1) {
            foreach ($values[0] as $column_name => $column_value) {
              if (isset($field['columns'][$column_name])) {
                $field_values[$column_name] = _elasticsearch_field_storage_value($field['columns'][$column_name]['type'], $column_value);
                if ($field['columns'][$column_name]['type'] == 'varchar') {
                  $field_values[$column_name . '_startwith'] = _elasticsearch_field_storage_value($field['columns'][$column_name]['type'], $column_value);
                }
              }
              if ($language != LANGUAGE_NONE) {
                $field_values['language'] = $language;
              }
            }
          }
          else {
            // Collapse deltas.
            $values = array_values($values);
            if ($field['cardinality'] > 1 && count($values) > $field['cardinality']) {
              // Silently remove additional values, that's what the core storage does.
              $values = array_slice($values, 0, $field['cardinality']);
            }
            foreach ($values as $delta => $column_values) {
              $store_values = array();
              foreach ($column_values as $column_name => $column_value) {
                if (isset($field['columns'][$column_name])) {
                  $store_values[$column_name] = _elasticsearch_field_storage_value($field['columns'][$column_name]['type'], $column_values[$column_name]);
                  if ($field['columns'][$column_name]['type'] == 'varchar') {
                    $store_values[$column_name . '_startwith'] = _elasticsearch_field_storage_value($field['columns'][$column_name]['type'], $column_values[$column_name]);
                  }
                }
              }
              // Collapse the field structure.
              if ($language != LANGUAGE_NONE) {
                $store_values['language'] = $language;
              }
              $field_values[] = $store_values;
            }
          }
        }
      }
    }
    $new_entity->$field_name = empty($field_values) ? NULL : $field_values;
  }

  // Save the object.
  $index = elasticsearch_field_storage_index(FIELD_LOAD_CURRENT);
  $type = $index->getType($entity_type);
  $document = new Elastica\Document($new_entity->entity_id, (array) $new_entity);
  $type->addDocument($document);
  $index->refresh();

  if (isset($revision_id)) {
    $index = elasticsearch_field_storage_index(FIELD_LOAD_REVISION);
    $type = $index->getType($entity_type);
    $document = new Elastica\Document($new_entity->revision_id, (array) $new_entity);
    $type->addDocument($document);
    $index->refresh();
  }
}

function _elasticsearch_field_storage_value($type, $value) {
  switch ($type) {
    case 'int':
    case 'serial':
      return is_array($value) ? array_map('intval', $value) : intval($value);
    case 'float':
      return is_array($value) ? array_map('floatval', $value) : floatval($value);
    default:
      return $value;
  }
}

function _elasticsearch_field_storage_query_build($field, $value, $operator, $type) {
  if (!isset($operator)) {
    $operator = is_array($value) ? 'IN' : '=';
  }
  $value = _elasticsearch_field_storage_value($type, $value);
  switch ($operator) {
    case '='      : return new Elastica\Filter\Term(array($field => $value));
    case 'IN'     : return new Elastica\Filter\Terms($field, $value);
    case 'NOT IN' : return new Elastica\Filter\BoolNot(new Elastica\Filter\Terms($field, $value));
    //case 'ALL'         : return array('$all' => $value);
    case '<'      : return new Elastica\Filter\Range($field, array('lt' => $value));
    case '>'      : return new Elastica\Filter\Range($field, array('gt' => $value));
    case '<='     : return new Elastica\Filter\Range($field, array('lte' => $value));
    case '>='     : return new Elastica\Filter\Range($field, array('gte' => $value));
    case '!='     :
    case '<>'     : return new Elastica\Filter\BoolNot(new Elastica\Filter\Term(array($field => $value)));
    case 'STARTS_WITH' :
      $query = new Elastica\Query\Match();
      $query->setFieldQuery($field . '_startwith', $value);
      $query->setFieldType($field . '_startwith', 'phrase_prefix');
      $filtered_query = new Elastica\Filter\Query($query);
      return $filtered_query;
    case 'CONTAINS'    :
      $query = new Elastica\Query\Match();
      $query->setField($field, $value);
      $filtered_query = new Elastica\Filter\Query($query);
      return $filtered_query;
    case 'BETWEEN'     : return new Elastica\Filter\Range($field, array('gte' => $value[0], 'lte' => $value[1]));
    default : throw new EntityFieldQueryException("$operator not implemented");
  }
}

function _elasticsearch_field_storage_field_properties($column_name, $type) {
  switch ($type) {
    case 'varchar':
      return array(
        $column_name => _elasticsearch_field_storage_field_mapping($type),
        // TODO: Convert to multi_field if reasonable.
        $column_name . '_startwith' => _elasticsearch_field_storage_field_mapping('startwith_string'),
      );
      break;
    default:
      return array($column_name => _elasticsearch_field_storage_field_mapping($type));
      break;
  }
}

function _elasticsearch_field_storage_field_mapping($type) {
  switch ($type) {
    case 'text':
    case 'varchar':
      return array(
        'type' => 'string',
      );
    case 'startwith_string':
      return array(
        'type' => 'string',
        "search_analyzer" => "analyzer_startswith",
        "index_analyzer" => "analyzer_startswith",
      );
    case 'int':
      return array(
        'type' => 'integer',
      );
    case 'boolean':
      return array(
        'type' => 'boolean',
      );
    case 'float':
      return array(
        'type' => 'float',
      );

    case 'date':
      return array(
        'type' => 'date',
        'format' => 'date_time',
      );

    default:
      return NULL;
  }
}

/**
 * Implement hook_field_storage_delete().
 *
 * This function deletes data for all fields for an entity from the database.
 */
function elasticsearch_field_storage_field_storage_delete($entity_type, $entity, $fields) {
  list($entity_id, , ) = entity_extract_ids($entity_type, $entity);

  $index = elasticsearch_field_storage_index(FIELD_LOAD_CURRENT);
  $index->getType($entity_type)->deleteById($entity_id);
  $index->refresh();

  // TODO: we need to make this scale. This is a dummy implementation for
  // test purposes.
	$query = new Elastica\Query\Terms();
	$query->setTerms('entity_id', array($entity_id));

  $index = elasticsearch_field_storage_index(FIELD_LOAD_REVISION);
  $type = $index->getType($entity_type);
  $result = $type->search($query);
  foreach ($result as $document) {
    $type->deleteById($document->getId());
  }
  $index->refresh();
}

/**
 * Implement hook_field_storage_delete_revision().
 *
 * This function actually deletes the data from the database.
 */
function elasticsearch_field_storage_field_storage_delete_revision($entity_type, $entity, $fields) {
  list(, $revision_id, ) = entity_extract_ids($entity_type, $entity);
  $index = elasticsearch_field_storage_index(FIELD_LOAD_REVISION);
  $index->getType($entity_type)->deleteById($revision_id);
  $index->refresh();
}

/**
 * Implement hook_field_storage_delete_instance().
 *
 * This function simply marks for deletion all data associated with the field.
 */
function elasticsearch_field_storage_field_storage_delete_instance($instance) {
  // TODO: figure out what to do.
}

/**
 * Implements hook_entity_query_alter().
 */
function elasticsearch_field_storage_entity_query_alter($query) {
  // TODO: Figure out a way to implement this smarter and avoid conflicts.
  if (isset($query->entityConditions['entity_type']['value']) && $query->entityConditions['entity_type']['value'] == 'node') {
    $query->executeCallback = 'elasticsearch_field_storage_query';
  }
}

function elasticsearch_field_storage_query($query) {
  // Use AND filter type as wrapper for all filters.
  $filter = new Elastica\Filter\BoolAnd();
  if (isset($query->entityConditions['entity_type'])) {
    $entity_type = $query->entityConditions['entity_type']['value'];
    $filter->addFilter(new Elastica\Filter\Type($entity_type));
    unset($query->entityConditions['entity_type']);
  }
  // TODO: Implement this later.
  else {
    // It looks like we are performing a 'has_data' query as we aren't being
    // passed any entity conditions - we try to be sure of this by rebuilding
    // a has data query and comparing that to our query
    if (count($query->fields) == 1) {
      $field = $query->fields[0];
      $field_has_data_query = new EntityFieldQuery;
      $column = $values = NULL;
      $count = TRUE;
      // We need to ascertain if the query we're being passed is a 'has data'
      // query that is concerned with listing the allowed values, eg list
      // module's _list_values_in_use function
      if (!empty($query->fieldConditions[0]['column'])) {
        // We are using a field condition, not just a general has data so we
        // need our has_data query to mimic this by adding a column to the field
        // condition
        $column = $query->fieldConditions[0]['column'];
        $values = $query->fieldConditions[0]['value'];
        $count = $query->count;
      }
      $field_has_data_query
        ->fieldCondition($field, $column, $values)
        ->range(0, 1)
        ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT');
      if ($count) {
        $field_has_data_query->count();
      }
      $field_has_data_query->executeCallback = 'elasticsearch_field_storage_query';
      $success = TRUE;
      foreach (get_object_vars($field_has_data_query) as $key => $value) {
        // We rebuild the has_data query and then compare with the received
        // query structure but by this point the query is altered so it's
        // always failing.
        if ($key != 'altered' && $value != $query->$key) {
          $success = FALSE;
        }
      }
      if ($success) {
        $index = elasticsearch_field_storage_index(FIELD_LOAD_CURRENT);
        if ($index->count(new Elastica\Query\ConstantScore(new Elastica\Filter\Exists($field['field_name'])))) {
          return TRUE;
        }
        return FALSE;
      }

      // If we're in a field_purge_batch query let's just skip for now.
      // TODO: implement purging.
      if ($query->deleted == TRUE) {
        // Return nothing. Nothing has to be purged right now.
        return array();
      }
    }
    //TODO: Figure out if an exception is needed here.
    throw new EntityFieldQueryException('No entity_type');
  }

  $type_map = array('entity_id' => 'int', 'revision_id' => 'int', 'bundle' => 'text');
  foreach ($query->entityConditions as $field => $data) {
    $value = $data['value'];
    $filter->addFilter(_elasticsearch_field_storage_query_build($field, $value, $data['operator'], $type_map[$field]));
  }

  if ($query->propertyConditions) {
    $entity_info = entity_get_info($entity_type);
    $table_schema = isset($entity_info['base table']) ? drupal_get_schema($entity_info['base table']) : array();
    foreach ($query->propertyConditions as $data) {
      $type = isset($table_schema['fields'][$data['column']]['type']) ? $table_schema['fields'][$data['column']]['type'] : NULL;
      $filter->addFilter(_elasticsearch_field_storage_query_build($data['column'], $data['value'], $data['operator'], $type));
    }
  }
  // unset propertyConditions to please execute()
  unset($query->propertyConditions);

  foreach ($query->fieldConditions as $index => $data) {
    $fieldName = $data['field']['field_name'];
    $type = $data['field']['columns'][$data['column']]['type'];
    // TODO: Implement grouping of queries.
//    if (FALSE && isset($nested_filter)) {
//      $nested_filter_params = $nested_filter->getParams();
//      if ($nested_filter_params['path'] == $fieldName) {
//        dpm($nested_filter_params,'nested filter params');
//      }
//    }
//    else {
    $nested_filter = new Elastica\Filter\Nested();
    $nested_filter->setPath($fieldName);
    $field_value_filter = _elasticsearch_field_storage_query_build($fieldName . '.' . $data['column'], $data['value'], $data['operator'], $type);
    // Convert filter to query in order to use with Nested filter.
    if ($field_value_filter instanceof \Elastica\Filter\AbstractFilter) {
      $field_value_filter = new Elastica\Query\ConstantScore($field_value_filter);
    }
    $nested_filter->setQuery($field_value_filter);
    $filter->addFilter($nested_filter);
//    }
    unset($query->fields[$index]);
  }

  // TODO: Figure out what is this.
  /*
  foreach ($query->fields as $field) {
    $find[$field['field_name']]['$exists'] = TRUE;
  }
  */

  $id_key = $query->age == FIELD_LOAD_CURRENT ? 'entity_id' : 'revision_id';

  // Wrap our filter in ConstantScore query.
  $filtered_query = new Elastica\Query();
  $filtered_query = $filtered_query->create($filter);
  $search_options = array();
  $index = elasticsearch_field_storage_index($query->age);
  $type = $index->getType($entity_type);

  if (isset($entity_type)) {
    if ($query->count && !$query->range) {
      return $type->count($filtered_query);
    }
    if ($query->range) {
      $search_options = array('from' => $query->range['start'], 'size' => $query->range['length']);
    }
    if ($query->count) {
      return $type->search($filtered_query, $search_options)->count();
    }
    else {
      // TODO: Create not_analyzed fields to sort text fields.
      $sort = array();
      foreach ($query->order as $order) {
        switch ($order['type']) {
          case 'field':
            $key = $order['specifier']['field']['field_name'] . '.' . $order['specifier']['column'];
            break;
          case 'property':
            $key = $order['specifier'];
            break;
          case 'entity':
            $key = $order['specifier'];
            break;
        }
        $sort[$key]['order'] = $order['direction'] == 'ASC' ? 'asc' : 'desc';
      }
      if ($sort) {
        $filtered_query->setParam('sort', $sort);
      }
    }
  }

  $results = $type->search($filtered_query, $search_options);
  $return = array();
  foreach ($results as $result) {
    $result = $result->getSource();
    $entity = entity_create_stub_entity($entity_type, array($result['entity_id'], $result['revision_id'], $result['bundle']));
    $return[$entity_type][$result[$id_key]] = $entity;
  }

  return $return;
}

/**
 * Implement hook_field_attach_rename_bundle().
 */
function elasticsearch_field_storage_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new) {
  // TODO: we need to make this scale. This is a dummy implementation for
  // test purposes.

	$query = new Elastica\Query\Terms();
	$query->setTerms('bundle', array($bundle_old));

  $indexes = array(
    elasticsearch_field_storage_index(FIELD_LOAD_CURRENT),
    elasticsearch_field_storage_index(FIELD_LOAD_REVISION),
  );

  foreach ($indexes as $index) {
    $type = $index->getType($entity_type);
    $result = $type->search($query);
    foreach ($result as $document) {
      $source = $document->getSource();
      $source['bundle'] = $bundle_new;
      $document = new Elastica\Document($document->getId(), $source);
      $type->addDocument($document);
    }
    $index->refresh();
  }
}

/**
 * Implements hook_entity_insert().
 */
function elasticsearch_field_storage_entity_insert($entity, $entity_type) {
  elasticsearch_field_storage_field_storage_write($entity_type, $entity, NULL, array(), TRUE);
}

/**
 * Implements hook_entity_update().
 */
function elasticsearch_field_storage_entity_update($entity, $entity_type) {
  elasticsearch_field_storage_field_storage_write($entity_type, $entity, NULL, array(), TRUE);
}

/**
 * Implements hook_field_attach_delete.
 */
function _DISABLED_elasticsearch_field_storage_field_attach_delete($entity_type, $entity) {
  // Disabled: this needs to be rewritten as a hook_entity_delete(),
  // and as a consequence this module needs to depend on Entity API.
}

/**
 * Implements hook__elasticsearch_field_storage_index_settings_alter().
 *
 * @param \Elastica\Index $index
 * @param $data
 */
function elasticsearch_field_storage_elasticsearch_field_storage_index_settings_alter(&$data, Elastica\Index $index) {
  // Define default settings and analysers.
  $data['settings']['index']['analysis']['analyzer']['analyzer_startswith'] = array(
    "tokenizer" => "keyword",
    "filter" => "lowercase",
  );
}
